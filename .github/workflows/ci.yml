name: CI

on:
  push:
    branches: [ main, internalpc ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Python ${{ matrix.python-version }} - Julia ${{ matrix.julia-version }} - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3']
        julia-version: ['lts', '1']
        os: [ubuntu-latest]
        include:
          # Add macOS and Windows for latest versions
          - python-version: '3'
            julia-version: '1'
            os: macos-latest
          - python-version: '3'
            julia-version: '1'
            os: windows-latest
    
    env:
      JULIA_NUM_THREADS: 1  # Prevent segfaults as noted in README
      PYTHON_JULIACALL_HANDLE_SIGNALS: yes
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Set up Julia ${{ matrix.julia-version }}
        uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.julia-version }}
      
      - name: Cache Julia packages
        uses: julia-actions/cache@v2
        with:
          cache-registries: "true"
      
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
      
      - name: Install Python package and test dependencies
        run: |
          uv sync --dev
        shell: bash
      
      - name: Verify Julia installation
        run: |
          julia --version
          julia -e "using InteractiveUtils; versioninfo()"
      
      - name: Pre-compile Julia dependencies
        run: |
          uv run python -c "import optimalgiv"
        env:
          PYTHON_JULIACALL_AUTOLOAD_IPYTHON_EXTENSION: "no"
      
      - name: Run tests with coverage
        run: |
          uv run python -m pytest tests/ -v --cov=optimalgiv --cov-report=xml --cov-report=term -k "not test_against_julia_results"
        env:
          PYTHON_JULIACALL_AUTOLOAD_IPYTHON_EXTENSION: "no"
          JULIA_NUM_THREADS: 1
      
      - name: Run Julia-Python integration tests
        shell: bash
        run: |
          # Remove any existing outputs to force fresh Julia run
          rm -rf tests/julia_comparison/outputs
          uv run python -m pytest tests/test_against_julia_results.py -v
        env:
          PYTHON_JULIACALL_AUTOLOAD_IPYTHON_EXTENSION: "no"
          JULIA_NUM_THREADS: 1
      
      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3' && matrix.julia-version == '1'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}-jl${{ matrix.julia-version }}
          path: |
            coverage.xml
            .coverage
          retention-days: 30

  # Separate job for testing first-time installation experience
  fresh-install-test:
    name: Fresh Install Test - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    env:
      JULIA_NUM_THREADS: 1
      OPTIMALGIV_FORCE_SETUP: 1  # Force full Julia setup
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
      
      # Don't set up Julia - let the package install it
      - name: Install package from scratch
        run: |
          uv sync
      
      - name: Test import and basic functionality
        run: |
          uv run python -c "
          import optimalgiv as og
          import pandas as pd
          import numpy as np
          
          # Test that Julia was installed and packages compiled
          print('optimalgiv version:', og.__version__)
          
          # Quick functionality test with simdata
          df = pd.read_csv('examples/simdata1.csv')
          df['id'] = df['id'].astype('category')
          
          # Run a simple model
          model = og.giv(
              df,
              'q + endog(p) ~ 0 + fe(id)',
              id='id', t='t', weight='absS',
              algorithm='scalar_search',
              guess=1.0,
              quiet=True
          )
          
          print('Model converged:', model.converged)
          print('Aggregate coefficient:', model.agg_coef)
          "
        shell: bash